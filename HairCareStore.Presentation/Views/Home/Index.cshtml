@inject IProductRepository ProductDapperRepository
@model Product

@{
    var products = ProductDapperRepository.GetAllProducts();
}

<h2>Add new product</h2>

<form class="row g-3" method="post" action="Product/CreateProduct">
    <div asp-validation-summary="All"></div>
    <div class="mb-1">
        <label asp-for="Name" for="Name" class="form-label">Name</label>
        <input asp-for="Name" type="text" class="form-control" id="name" name="name">
    </div>
    <div class="mb-1">
        <label asp-for="Description" for="Description" class="form-label">Description</label>
        <input asp-for="Description" type="text" class="form-control" id="Description" name="Description">
    </div>
    <div class="mb-1">
        <label asp-for="Price" for="Price" class="form-label">Price</label>
        <input asp-for="Price" type="text" class="form-control" id="Price" name="Price">
    </div>

    <button class="btn btn-success">Add</button>
</form>

<br>

<h2>Product List</h2>
@if(products == null || products.Any() == false) {
    <h3>...</h3>
}
else {
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Name</th>
                <th scope="col">Description</th>
                <th scope="col">Price</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var product in products) {
                <tr id="row">
                    <th><a href="/Product/@product.Id">@product.Id</a></th>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@Math.Round(product.Price, 2)</td>
                    <td><button class="btn btn-danger" onclick="deleteProduct(@product.Id)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
}

<script>
    async function deleteProduct(productId) {
    try {
        const response = await fetch(`http://localhost:7777/Product/DeleteProduct/${productId}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            document.getElementById('row').remove();
        } else {
            console.error(response);
        }
    } catch (error) {
        console.error("Request failed", error);
    }
}
</script>